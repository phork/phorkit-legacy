<?php $objController = AppRegistry::get('Controller'); ?>

<div id="content" class="constrained">
	<h1 class="chunkfive">Hello and welcome to <?php echo($strSiteTitle); ?>!</h1>
	<h2><?php echo($strSiteTitle); ?> is a starter kit for building websites on top of the <a href="http://phork.org" rel="external">Phork Framework</a>.</h2> 
	
	<div class="columns cleared">
		<div class="column left">
			<div id="intro" class="section">
				<h3>Introduction</h3>
				<p>
					<?php echo($strSiteTitle); ?> includes both front end and back end enhancements to the core set 
					of functionality provided by the <a href="http://phork.org" rel="external">Phork Framework</a>. 
					It's an excellent starting point for both new and experienced users who don't want to reinvent 
					the wheel when it comes to setting up the basic building blocks of a website.
				</p>
				<p>
					This document only focuses on the <?php echo($strSiteTitle); ?> enhancements and doesn't cover
					any of the core Phork Framework features.
				</p>
				<p>
					<em>For more information on how the Phork Framework works, check out the 
					<a href="http://phork.org/manual/" rel="external">Phork manual</a>.</em>
				</p>
				
				<div class="images">
					<img src="/img/themes/default/demo/install/1.png" width="200" class="first tipped" title="The installation tests make it easy to get up and running" /></a>
					<img src="/img/themes/default/demo/install/2.png" width="200" class="second tipped" title="Quickly see which modules have been installed" /></a>
					<img src="/img/themes/default/demo/install/3.png" width="200" class="third tipped" title="Get help and tips to install missing and broken modules" /></a>
				</div>
			</div>
			
			<div id="api" class="section">
				<h3>API Framework</h3>
				<p>
					<?php echo($strSiteTitle); ?> includes a REST API framework that supports XML, JSON and JSONP
					calls. The API is set up so that your application can use its own API internally without having
					to make additional HTTP requests. This is accomplished using the ApiHelper utility class. 
					We recommend developing an API concurrently, using internal API calls, and doing all your caching
					at the API level.
				</p>
				<p>
					<?php echo($strSiteTitle); ?> also includes a batch API method to allow multiple API calls to
					be run from a single request. A batch request accepts a post containing JSON data with all the
					calls to make and the type of call (GET, POST, PUT, or DELETE).
				</p>
				<p>
					<?php echo($strSiteTitle); ?> comes pre-packaged with fully-featured user and event APIs. These
					allow you to get user information, request friendships, follow and unfollow users, post status 
					updates, see friends' status updates and much more. Each API call can easily be tuned to require 
					authentication or not.
				</p>
			</div>
			
			<div id="users" class="section">
				<h3>User Management</h3>
				<p>
					<?php echo($strSiteTitle); ?> has a fully featured user management system. Users can 
					<a href="<?php echo($strBaseUrl); ?>/account/signup/">sign up</a>, 
					<a href="<?php echo($strBaseUrl); ?>/account/login/">log in</a>, 
					<a href="<?php echo($strBaseUrl); ?>/logout/">log out</a>, 
					<a href="<?php echo($strBaseUrl); ?>/account/profile/">create a profile</a>, 
					<a href="<?php echo($strBaseUrl); ?>/account/settings/">update account settings</a>, 
					<a href="<?php echo($strBaseUrl); ?>/account/password/">reset lost passwords</a> 
					and verify their email address. There's also a built in roles system, so users can belong to one
					or more permissioned groups.
				</p>
				
				<div class="images">
					<a href="<?php echo($strBaseUrl); ?>/account/signup/" class="tipped" title="Go to the signup page"><img src="/img/themes/default/demo/signup.png" width="200" class="first" /></a>
					<a href="<?php echo($strBaseUrl); ?>/account/settings/" class="tipped" title="Go to the account settings page"><img src="/img/themes/default/demo/account.png" width="200" class="second" /></a>
					<a href="<?php echo($strBaseUrl); ?>/beta/" class="tipped" title="Go to the beta login page"><img src="/img/themes/default/demo/beta.png" width="200" class="third" /></a>
				</div>
				
				<h4 id="users-facebook">Facebook Integration</h4>
				<p>
					<?php echo($strSiteTitle); ?> uses Facebook's 
					<a href="https://github.com/facebook/php-sdk/" rel="external">PHP SDK</a> to allow users to 
					seamlessly sign up and log in using their Facebook account. After a user clicks the button to 
					sign up with Facebook they're redirected to Facebook, and after they've granted the application 
					access they're redirected back to <?php echo($strSiteTitle); ?> to finish the sign up process 
					using the data imported from their Facebook profile.
				</p>
				<p>
					<?php echo($strSiteTitle); ?> can also post to a user's Facebook wall and let them find and
					connect with their Facebook friends who've also signed up here. Because Facebook allows 
					granular permissions, <?php echo($strSiteTitle); ?> only asks for the minimum permissions allowed 
					to connect the account. Later on, if <?php echo($strSiteTitle); ?> wants to perform other actions 
					the user will be asked to grant more permissions.
				</p>
				
				<h4 id="users-twitter">Twitter Integration</h4>
				<p>
					<?php echo($strSiteTitle); ?> uses 
					<a href="http://framework.zend.com/manual/en/zend.service.twitter.html" rel="external">Zend_Service_Twitter</a> 
					from the Zend Framework to allow users to seamlessly sign up and log in using their Twitter
					account. After a user clicks the button to sign up with Twitter they're redirected to Twitter, 
					and after they've granted the application access they're redirected back to <?php echo($strSiteTitle); ?>
					to finish the sign up process using the data imported from their Twitter profile.
				</p>
				<p>
					<?php echo($strSiteTitle); ?> can also post a tweet for the user and let them find and connect
					with their Twitter friends who've also signed up here.
				</p>
				
				<h4 id="users-connections">Friends and Followers</h4>
				<p>
					<?php echo($strSiteTitle); ?> comes with the ability to set up both friend and follower 
					relationships. Friendships are reciprocal and require both users' approval (like Facebook), 
					and followers are a one way system and require no approval (like Twitter). The friend and 
					follower system can be used at the same time, or you can choose to just use one system. 
					Also included is the ability to block users.
				</p>
				
				<h4 id="users-events">Event Stream</h4>
				<p>
					<?php echo($strSiteTitle); ?> includes an event stream system that can tie into any model's 
					post-save event or act as a standalone system. Anything a user does, from friending or following 
					another user to updating their profile can be posted to the event stream. The events in the 
					stream can be filtered to show just a single user's events, a user's connections' (friends)
					events, or all events in reverse chronological order.
				</p>
				
				<h4 id="users-beta">Beta Access</h4>
				<p>
					<?php echo($strSiteTitle); ?> can be set up to only allow pre-selected beta users to access to 
					the site. Beta users can register with a one-time-use key from the database, or using a shared 
					multi-use key defined in the site configuration file.
				</p>
			</div>
			
			<div id="javascript" class="section">
				<h3>Javascript Enhancements</h3>
				<p>
					<?php echo($strSiteTitle); ?> comes packaged with <a href="http://jquery.com" rel="external">jQuery</a> 
					and has several utilities built on top of the jQuery library, including overlays and modal windows,
					a sub-navigation system, several different alert styles, clearable form labels, and email obfuscation
					techniques. All Javascript is added unobtrusively and is set up to degrade gracefully.
				</p>
				
				<div class="images">
					<a href="<?php echo($strBaseUrl); ?>/account/login/" class="overlay-login-trigger"><img src="/img/themes/default/demo/modal.png" width="200" class="first tipped" title="Trigger the login overlay" /></a>
					<img src="/img/themes/default/demo/alert.png" width="200" class="second tipped trigger" title="Trigger a confirmation overlay" data-trigger="confirm" /></a>
					<img src="/img/themes/default/demo/subnav.png" width="200" class="third tipped trigger" title="Trigger the About Us subnav" data-trigger="subnav" /></a>
				</div>
				
				<h4 id="javascript-overlays">Overlays</h4>
				<p>
					<?php echo($strSiteTitle); ?> comes with an easy to use overlay system. The contents of the overlay
					can be loaded in via AJAX, built from a template, built with existing page content, or set to use
					a predefined message. Overlays have the option to be a modal window, which will black out the rest
					of the page content, or they can float on top of existing content.
				</p>
				<p>
					The overlay system is currently used for login windows, tooltips, alerts and confirmation dialogs.
				</p>
				
				<h4 id="javascript-alerts">Alerts</h4>
				<p>
					<?php echo($strSiteTitle); ?> comes with two different alert styles. Choose from a modal overlay
					with optional confirm and cancel buttons, or a line item at the top of the page. It's easy to mix
					and match alerts for the appropriate event.
				</p>
				
				<h4 id="javascript-forms">Forms</h4>
				<p>
					<?php echo($strSiteTitle); ?> is set up so that any form with the class "ajax" is submitted via
					AJAX. Forms in overlays and forms in the regular flow of the page can all automatically submit
					via AJAX.
				</p>
				<p>
					It's also easy to add labels inside form fields that will clear on focus and come back again
					on blur if no data has been entered.
				</p>
			</div>
			
			<div id="email" class="section">
				<h3>Email</h3>
				<p>
					<?php echo($strSiteTitle); ?> makes it easy to send emails to registered users using either PHP's
					built in mail function, or through a 3rd party's API. It even comes packaged with optional wrapper
					for <a href="http://postmarkapp.com" rel="external">Postmark</a> integration.
				</p>
				<p>
					<?php echo($strSiteTitle); ?> comes with some basic email templates to auto-respond to certain
					actions, including emailing the user a link to reset their password, and emailing a user a link
					to verify their account after they've signed up or changed their email address.
				</p>
			</div>
			
			<div id="zend" class="section">
				<h3>Zend Integration</h3>
				<p>
					<?php echo($strSiteTitle); ?> allows your application to seamlessly integrate with the 
					<a href="http://framework.zend.com/" rel="external">Zend Framework</a> using the ZendLoader 
					extension. It's simple to pull in any number of Zend libraries to enhance your system.
				</p>
				<p>
					The Zend Framework is optional and isn't required for any core functionality. Currently 
					<?php echo($strSiteTitle); ?> makes use of Zend's Twitter library, Amazon S3 integration, and, 
					if the Zend Framework is installed, it will use the improved Zend_Json encoding and decoding
					tools instead of PHP's native functions.
				</p>
			</div>
		</div>
		
		<div class="column right">
			<div class="highlight">
				<ul id="toc" class="inner">
					<li><a href="#intro">Introduction</a></li>
					<li><a href="#api">API framework</a>
					<li><a href="#users">User management</a>
						<ul>
							<li><a href="#users-facebook">Facebook integration</a></li>
							<li><a href="#users-twitter">Twitter integration</a></li>
							<li><a href="#users-connections">User connections</a></li>
							<li><a href="#users-events">Event stream</a></li>
							<li><a href="#users-beta">Beta access</a></li>
						</ul>
					</li>
					<li><a href="#javascript">Javascript enhancements</a>
						<ul>
							<li><a href="#javascript-overlays">Overlays</a></li>
							<li><a href="#javascript-alerts">Alerts</a></li>
							<li><a href="#javascript-forms">Forms</a></li>
						</ul>
					</li>
					<li><a href="#email">Email</a></li>
					<li><a href="#zend">Zend integration</a></li>
				</ul>
			</div>
			
			<div id="credits">
				<div class="image">
					<a href="<?php echo($strBaseUrl); ?>/user/<?php echo($arrUser['username']); ?>/" title="<?php echo($arrUser['username']); ?>" class="tooltip userbox" data-template="user" data-username="<?php echo($arrUser['username']); ?>" data-display-name="<?php echo($arrUser['displayname']); ?>" data-thumbnail="<?php echo($arrUser['avatars']['thumb']); ?>" data-location="<?php echo(htmlentities($arrUser['location'])); ?>"><img src="<?php echo($arrUser['avatars']['tiny']); ?>" width="25" height="25" alt="<?php echo($arrUser['username']); ?>" /></a>
				</div>
				<div class="blurb">
					<?php echo($strSiteTitle); ?> was developed by <a href="<?php echo($strBaseUrl); ?>/user/<?php echo($arrUser['username']); ?>/"><?php echo($arrUser['displayname']); ?></a><br />
				</div>	
			</div>
		</div>
	</div>
</div>

<?php 
	if (!AppConfig::get('UserTooltip', false)) {
		$objController->includeCommon('tooltips/user');
	} 
?>